#!/usr/bin/ruby -w
#
# erbook is an extensible document processor based on eRuby.
#
# * The standard input stream will be read if an input file is not specified.
#
# * The final output document will be written to the standard output stream.
#
# * If an error occurs, the input document will be written to the standard
#   output stream, so that you can investigate line numbers in the error.
#
# Usage:
#
#   erbook [Option...] FormatName [InputFile]
#   erbook [Option...] FormatFile [InputFile]
#

require File.join(File.dirname(__FILE__), '..', 'lib', 'erbook')

# XXX: the basename() is for being launched by a RubyGems executable
if __FILE__ == $0 or File.basename(__FILE__) == File.basename($0)
  require 'yaml'

  ##
  # command line
  #
  
  begin require 'rubygems' rescue LoadError end
  require 'trollop'

  options = Trollop.options do
    # show program description located at the top of this file
    banner File.read(__FILE__)[/\A.*?^$\n/m].
           gsub(/^# ?/, '').sub(/\A.*?\n/, '')
    banner ''

    # show list of available formats
    banner 'FormatName:'
    ERBook::FORMAT_FILES.each do |file|
      name = File.basename(file, '.yaml')
      desc = YAML.load_file(file)['desc'] rescue nil
      banner '%16s:   %s' % [name, desc]
    end
    banner ''

    # show list of command-line options
    banner 'Option:'
    opt :unindent, 'Unindent node content hierarchically'

    # show program version information
    version [
      "project: #{ERBook::PROJECT}",
      "version: #{ERBook::VERSION}",
      "release: #{ERBook::RELEASE}",
      "website: #{ERBook::WEBSITE}",
      "install: #{ERBook::INSTALL_DIR}",
    ].join("\n")
  end

  ##
  # program body
  #
 
  format = ARGV.shift or
  raise ArgumentError, "Format was not specified.  Run `#{$0} -h` for help."

  if input_file = ARGV.shift
    input_text = File.read(input_file)
  else
    input_file = 'STDIN'
    input_text = STDIN.read
  end

  puts ERBook::Document.new(format, input_text, input_file, options)
end
